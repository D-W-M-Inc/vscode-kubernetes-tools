{
    "name": "kubernetes-tools",
    "displayName": "Kubernetes Free",
    "description": "Develop, deploy and debug Kubernetes applications",
    "version": "1.3.18",
    "publisher": "cloorc",
    "engines": {
        "vscode": "^1.71.0"
    },
    "license": "Apache-2.0",
    "categories": [
        "Snippets",
        "Linters",
        "Debuggers",
        "Azure",
        "Other"
    ],
    "keywords": [
        "kubernetes",
        "helm",
        "aks",
        "gke",
        "aws"
    ],
    "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
    "icon": "images/k8s-logo.png",
    "activationEvents": [
        "onCommand:extension.vsKubernetesSelectPod",
        "onLanguage:yaml",
        "onFileSystem:k8smsx"
    ],
    "main": "./dist/extension",
    "contributes": {
        "configuration": {
            "type": "object",
            "title": "Kubernetes",
            "properties": {
                "vs-kubernetes": {
                    "type": "object",
                    "title": "Additional settings",
                    "description": "Kubernetes configuration",
                    "properties": {
                        "vs-kubernetes.namespace": {
                            "type": "string",
                            "description": "The namespace to use for all commands"
                        },
                        "vs-kubernetes.kubectl-path": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a kubectl binary."
                        },
                        "vs-kubernetes.helm-path": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a helm binary."
                        },
                        "vs-kubernetes.minikube-path": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a minikube binary."
                        },
                        "vs-kubernetes.kubectl-path.windows": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a kubectl binary."
                        },
                        "vs-kubernetes.helm-path.windows": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a helm binary."
                        },
                        "vs-kubernetes.minikube-path.windows": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a minikube binary."
                        },
                        "vs-kubernetes.kubectl-path.mac": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a kubectl binary."
                        },
                        "vs-kubernetes.helm-path.mac": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a helm binary."
                        },
                        "vs-kubernetes.minikube-path.mac": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a minikube binary."
                        },
                        "vs-kubernetes.kubectl-path.linux": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a kubectl binary."
                        },
                        "vs-kubernetes.helm-path.linux": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a helm binary."
                        },
                        "vs-kubernetes.minikube-path.linux": {
                            "type": "string",
                            "description": "[deprecated - use top level property] File path to a minikube binary."
                        },
                        "vs-kubernetes.kubectlVersioning": {
                            "type": "string",
                            "enum": [
                                "user-provided",
                                "infer"
                            ],
                            "description": "Whether to use the kubectl binary you provide ('user-provided'), or to automatically download the right version of kubectl for each cluster ('infer')."
                        },
                        "vs-kubernetes.kubeconfig": {
                            "type": "string",
                            "description": "File path to the kubeconfig file."
                        },
                        "vs-kubernetes.knownKubeconfigs": {
                            "type": "array",
                            "description": "File paths to kubeconfig files from which you can select."
                        },
                        "vs-kubernetes.autoCleanupOnDebugTerminate": {
                            "type": "boolean",
                            "description": "Once the debug session is terminated, automatically clean up the created Deployment and associated Pod by the command \"Kubernetes: Debug (Launch)\"."
                        },
                        "vs-kubernetes.outputFormat": {
                            "enum": [
                                "json",
                                "yaml"
                            ],
                            "type": "string",
                            "description": "Output format for Kubernetes specs. One of 'json' or 'yaml' (default)."
                        },
                        "vs-kubernetes.nodejs-autodetect-remote-root": {
                            "type": "boolean",
                            "description": "If true will try to automatically get the root location of the source code in the container (nodejs)."
                        },
                        "vs-kubernetes.nodejs-remote-root": {
                            "type": "string",
                            "description": "The root location of the source code in the container (nodejs)."
                        },
                        "vs-kubernetes.nodejs-debug-port": {
                            "type": "number",
                            "description": "Remote debugging port for nodejs. Usually 9229."
                        },
                        "checkForMinikubeUpgrade": {
                            "type": "boolean",
                            "description": "Notify on startup if update is available for minikube"
                        },
                        "disable-lint": {
                            "type": "boolean",
                            "description": "Disable all linting of Kubernetes files"
                        },
                        "disable-linters": {
                            "type": "array",
                            "description": "List of linters by name to disable"
                        },
                        "resource-commands-on-files": {
                            "type": "boolean",
                            "description": "If true, show Kubernetes resource commands on file context menu for all YAML files"
                        },
                        "imageBuildTool": {
                            "type": "string",
                            "enum": [
                                "Docker",
                                "Buildah"
                            ],
                            "description": "Container image build tool. By default, Docker."
                        },
                        "vs-kubernetes.python-autodetect-remote-root": {
                            "type": "boolean",
                            "description": "If true will try to automatically get the root location of the source code in the container (Python)."
                        },
                        "vs-kubernetes.python-remote-root": {
                            "type": "string",
                            "description": "The root location of the source code in the container (Python)."
                        },
                        "vs-kubernetes.python-debug-port": {
                            "type": "number",
                            "description": "Remote debugging port for Python. Usually 5678."
                        },
                        "vs-kubernetes.dotnet-vsdbg-path": {
                            "type": "string",
                            "description": "The path to the vsdbg debugger in the container (.NET)."
                        },
                        "vs-kubernetes.dotnet-source-file-map": {
                            "type": "string",
                            "description": "The compilation root for the vsdbg debugger in order to have a sourceFileMap in the attach configuration of debug (.NET)."
                        },
                        "vs-kubernetes.debug-just-my-code": {
                            "type": "boolean",
                            "description": "Enable/disable justMyCode debug configuration property for .NET, Python."
                        },
                        "vs-kubernetes.resources-to-watch": {
                            "type": "array",
                            "description": "List of resources to be watched."
                        },
                        "vs-kubernetes.enable-snap-flag": {
                            "type": "boolean",
                            "description": "Enables compatibility with instances of VS Code that were installed using snap."
                        },
                        "vs-kubernetes.disable-context-info-status-bar": {
                            "type": "boolean",
                            "description": "Disable displaying your current Kubernetes context in VS Code's status bar."
                        },
                        "vs-kubernetes.disable-namespace-info-status-bar": {
                            "type": "boolean",
                            "description": "Disable displaying your current Kubernetes namespace in VS Code's status bar."
                        },
                        "vs-kubernetes.local-tunnel-debug-provider": {
                            "type": "string",
                            "description": "Configure the Local Tunnel debug provider you want to use by default."
                        },
                        "vs-kubernetes.enable-minimal-workflow": {
                            "type": "boolean",
                            "description": "Enables the minimal workflow for several actions (Get, Describe, Scale, Expose, Switch). It reduces the queries to the cluster but the guided prompt has limited options."
                        },
                        "vs-kubernetes.suppress-kubectl-not-found-alerts": {
                            "type": "boolean",
                            "default": false,
                            "description": "Suppresses the display of warnings if no kubectl binary is available"
                        },
                        "vs-kubernetes.suppress-helm-not-found-alerts": {
                            "type": "boolean",
                            "default": false,
                            "description": "Suppresses the display of warnings if no helm binary is available"
                        },
                        "vs-kubernetes.ignore-recommendations": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set to true to silence Kubernetes extension recommendation notifications."
                        },
                        "vs-kubernetes.crd-code-completion": {
                            "type": "string",
                            "enum": [
                                "enabled",
                                "disabled"
                            ],
                            "description": "Set the smart code completion for CRDs. This would always prevent/allow the plugin to fetch all custom schemas from all CRDs on cluster, despite of their number."
                        },
                        "vs-kubernetes.node-shell-image": {
                            "type": "string",
                            "default": "alexeiled/nsenter:2.38",
                            "description": "Set the node shell image."
                        },
                        "vs-kubernetes.minikube-show-information-expiration": {
                            "type": "string",
                            "default": "Install",
                            "description": "Set installation expiration for displaying minikube installation dialog box."
                        }
                    },
                    "default": {
                        "vs-kubernetes.namespace": "",
                        "vs-kubernetes.kubectl-path": "",
                        "vs-kubernetes.helm-path": "",
                        "vs-kubernetes.minikube-path": "",
                        "vs-kubernetes.kubectlVersioning": "user-provided",
                        "vs-kubernetes.outputFormat": "yaml",
                        "vs-kubernetes.kubeconfig": "",
                        "vs-kubernetes.knownKubeconfigs": [],
                        "vs-kubernetes.autoCleanupOnDebugTerminate": false,
                        "vs-kubernetes.nodejs-autodetect-remote-root": true,
                        "vs-kubernetes.nodejs-remote-root": "",
                        "vs-kubernetes.nodejs-debug-port": 9229,
                        "vs-kubernetes.dotnet-vsdbg-path": "~/vsdbg/vsdbg",
                        "vs-kubernetes.local-tunnel-debug-provider": "",
                        "checkForMinikubeUpgrade": true,
                        "imageBuildTool": "Docker",
                        "vs-kubernetes.node-shell-image": "alexeiled/nsenter:2.38"
                    }
                },
                "vsdocker.imageUser": {
                    "type": "string",
                    "default": null,
                    "description": "Image prefix for docker images ie 'docker.io/brendanburns'"
                },
                "vscode-kubernetes.kubectl-path": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Path to kubectl",
                    "description": "File path to a kubectl binary. (You can override this on a per-OS basis if required)."
                },
                "vscode-kubernetes.helm-path": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Helm path",
                    "description": "File path to a helm binary. (You can override this on a per-OS basis if required)."
                },
                "vscode-kubernetes.minikube-path": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Minikube path",
                    "description": "File path to a minikube binary. (You can override this on a per-OS basis if required)."
                },
                "vscode-kubernetes.kubectl-path-windows": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Path to kubectl (Windows)",
                    "description": "File path to a kubectl binary."
                },
                "vscode-kubernetes.helm-path-windows": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Helm path (Windows)",
                    "description": "File path to a helm binary."
                },
                "vscode-kubernetes.minikube-path-windows": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Minikube path (Windows)",
                    "description": "File path to a minikube binary."
                },
                "vscode-kubernetes.kubectl-path-mac": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Path to kubectl (Mac)",
                    "description": "File path to a kubectl binary."
                },
                "vscode-kubernetes.helm-path-mac": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Helm path (Mac)",
                    "description": "File path to a helm binary."
                },
                "vscode-kubernetes.minikube-path-mac": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Minikube path (Mac)",
                    "description": "File path to a minikube binary."
                },
                "vscode-kubernetes.kubectl-path-linux": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Path to kubectl (Linux)",
                    "description": "File path to a kubectl binary."
                },
                "vscode-kubernetes.helm-path-linux": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Helm path (Linux)",
                    "description": "File path to a helm binary."
                },
                "vscode-kubernetes.minikube-path-linux": {
                    "type": "string",
                    "scope": "machine",
                    "title": "Minikube path (Linux)",
                    "description": "File path to a minikube binary."
                },
                "vscode-kubernetes.log-viewer.follow": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to follow logs by default in the log viewer."
                },
                "vscode-kubernetes.log-viewer.timestamp": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to show timestamps by default in the log viewer."
                },
                "vscode-kubernetes.log-viewer.since": {
                    "type": "integer",
                    "default": -1,
                    "minimum": -1,
                    "description": "How far back to fetch logs from in seconds by default. Set to -1 for all logs."
                },
                "vscode-kubernetes.log-viewer.tail": {
                    "type": "integer",
                    "default": -1,
                    "minimum": -1,
                    "description": "The number of recent logs to display by default in the log viewer. Set to -1 for all log lines."
                },
                "vscode-kubernetes.log-viewer.destination": {
                    "type": "string",
                    "default": "Webview",
                    "description": "Where to display logs, defaults to the dedicated Webview.",
                    "enum": [
                        "Webview",
                        "Terminal"
                    ]
                },
                "vscode-kubernetes.log-viewer.wrap": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to wrap lines by default in the log viewer."
                },
                "vscode-kubernetes.log-viewer.autorun": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to true to automatically begin fetching logs once the log viewer is opened using the default settings."
                },
                "vs-kubernetes.node-shell-image": {
                    "type": "string",
                    "scope": "machine",
                    "default": "alexeiled/nsenter:2.38",
                    "description": "Use specific image instead of default on node shell."
                }
            }
        },
        "views": {
            "kubernetesView": [
                {
                    "id": "extension.vsKubernetesExplorer",
                    "name": "Clusters"
                },
                {
                    "id": "kubernetes.etcdExplorer",
                    "name": "Etcd"
                },
                {
                    "id": "kubernetes.gitlabExplorer",
                    "name": "GitLab Files"
                },
                {
                    "id": "extension.vsKubernetesHelmRepoExplorer",
                    "name": "Helm Repos"
                },
                {
                    "id": "kubernetes.minioExplorer",
                    "name": "MinIO"
                },
                {
                    "id": "kubernetes.cloudExplorer",
                    "name": "Clouds"
                },
                {
                    "id": "kubernetes.homeExplorer",
                    "name": "Home"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "icon": "images/logo.svg",
                    "id": "kubernetesView",
                    "title": "Kubernetes"
                }
            ]
        },
        "menus": {
            "editor/title": [
                {
                    "command": "extension.vsKubernetesDescribe.Refresh",
                    "when": "vscodeKubernetesDescribeContext"
                }
            ],
            "explorer/context": [
                {
                    "title": "Update Dependencies",
                    "when": "resourceFilename == requirements.yaml",
                    "command": "extension.helmDepUp",
                    "group": "2_helm@99"
                },
                {
                    "title": "Create Kubernetes resource",
                    "when": "resourceLangId == yaml && config.vs-kubernetes.resource-commands-on-files",
                    "command": "extension.vsKubernetesCreateFile",
                    "group": "2_k8s_1"
                },
                {
                    "title": "Apply Kubernetes resource",
                    "when": "resourceLangId == yaml && config.vs-kubernetes.resource-commands-on-files",
                    "command": "extension.vsKubernetesApplyFile",
                    "group": "2_k8s_2"
                },
                {
                    "title": "Delete Kubernetes resource",
                    "when": "resourceLangId == yaml && config.vs-kubernetes.resource-commands-on-files",
                    "command": "extension.vsKubernetesDeleteUri",
                    "group": "2_k8s_3"
                },
                {
                    "when": "true",
                    "command": "extension.helmConvertToTemplate",
                    "group": "2_helm@98"
                }
            ],
            "view/title": [
                {
                    "command": "extension.vsKubernetesRefreshExplorer",
                    "when": "view == extension.vsKubernetesExplorer",
                    "group": "navigation"
                },
                {
                    "command": "extension.vsKubernetesCreateCluster",
                    "when": "view == extension.vsKubernetesExplorer",
                    "group": "0"
                },
                {
                    "command": "extension.vsKubernetesConfigureFromCluster",
                    "when": "view == extension.vsKubernetesExplorer",
                    "group": "0"
                },
                {
                    "command": "extension.vsKubernetesUseKubeconfig",
                    "when": "view == extension.vsKubernetesExplorer",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesRefreshHelmRepoExplorer",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer",
                    "group": "navigation"
                },
                {
                    "command": "extension.vsKubernetesRefreshCloudExplorer",
                    "when": "view == kubernetes.cloudExplorer",
                    "group": "navigation"
                },
                {
                    "command": "kubernetes.cloudExplorer.findProviders",
                    "when": "view == kubernetes.cloudExplorer",
                    "group": "1"
                },
                {
                    "command": "kubernetes.etcdExplorer.refresh",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "navigation"
                },
                {
                    "command": "kubernetes.etcdExplorer.addExistingClusters",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.etcdExplorer.removeClusters",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.minioExplorer.refresh",
                    "when": "view == kubernetes.minioExplorer",
                    "group": "navigation"
                },
                {
                    "command": "kubernetes.minioExplorer.addExistingClusters",
                    "when": "view == kubernetes.minioExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.minioExplorer.removeClusters",
                    "when": "view == kubernetes.minioExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.refresh",
                    "when": "view == kubernetes.gitlabExplorer",
                    "group": "navigation"
                },
                {
                    "command": "kubernetes.gitlabExplorer.addExistingRepository",
                    "when": "view == kubernetes.gitlabExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.removeRepository",
                    "when": "view == kubernetes.gitlabExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.homeExplorer.refresh",
                    "when": "view == kubernetes.homeExplorer",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "extension.vsKubernetesUseContext",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster\\.inactive/i",
                    "group": "0@1"
                },
                {
                    "command": "extension.vsKubernetesDeleteContext",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster.*/i",
                    "group": "0@2"
                },
                {
                    "command": "extension.vsKubernetesCopy",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster.*/i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesRefresh",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster.*/i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesClusterInfo",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster($|\\s)/i",
                    "group": "0@1"
                },
                {
                    "command": "extension.vsKubernetesDashboard",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.\\w*cluster($|\\s)/i",
                    "group": "0@3"
                },
                {
                    "command": "extension.vsMinikubeStop",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.minikubeCluster/i",
                    "group": "2@1"
                },
                {
                    "command": "extension.vsMinikubeStart",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.minikubeCluster/i",
                    "group": "2@0"
                },
                {
                    "command": "extension.vsMinikubeStatus",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.minikubeCluster/i",
                    "group": "2@3"
                },
                {
                    "command": "extension.vsKubernetesUseNamespace",
                    "group": "0",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.namespace\\.inactive/i"
                },
                {
                    "command": "extension.vsKubernetesShowEvents",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.namespace/",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesFollowEvents",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.namespace/",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesCopy",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\./i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesRefresh",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\./i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesGet",
                    "group": "1@1",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.kind/i"
                },
                {
                    "command": "extension.vsKubernetesAddWatch",
                    "group": "3@1",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /k8s-watchable/i"
                },
                {
                    "command": "extension.vsKubernetesDeleteWatch",
                    "group": "3@2",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /k8s-watchable/i"
                },
                {
                    "command": "extension.vsKubernetesLoad",
                    "group": "0",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesGet",
                    "group": "2@1",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesEdit",
                    "group": "2@2",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesEditLegacy",
                    "group": "2@3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesNodeShell",
                    "group": "2@4",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.node/i"
                },
                {
                    "command": "extension.vsKubernetesInstances",
                    "group": "2@5",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(deployment|statefulset|daemonset)/i"
                },
                {
                    "command": "extension.vsKubernetesDelete",
                    "group": "2@6",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource.*/i"
                },
                {
                    "command": "extension.vsKubernetesServiceBridge",
                    "group": "4@1",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.service.*/i"
                },
                {
                    "command": "extension.vsKubernetesServiceBridgeRecover",
                    "group": "4@2",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.service.*/i"
                },
                {
                    "command": "extension.vsKubernetesTransferServiceOwnership",
                    "group": "4@3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.service.*/i"
                },
                {
                    "command": "extension.vsKubernetesRemoveServiceKeepAnnotation",
                    "group": "4@4",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.service.*/i"
                },
                {
                    "command": "extension.vsKubernetesDescribe",
                    "group": "inline",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesDescribe",
                    "group": "inline",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesDescribe",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.helmConvertToTemplate",
                    "group": "2",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource(?!\\.namespace).*/i"
                },
                {
                    "command": "extension.vsKubernetesTerminal",
                    "group": "inline",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
                },
                {
                    "command": "extension.vsKubernetesTerminal",
                    "group": "2@4",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
                },
                {
                    "command": "extension.vsKubernetesDebugAttach",
                    "group": "2@5",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
                },
                {
                    "command": "extension.vsKubernetesDebugLocalTunnel",
                    "group": "2@6",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(pod|job|service|deployment)/i"
                },
                {
                    "command": "extension.vsKubernetesPortForward",
                    "group": "2@7",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
                },
                {
                    "command": "extension.vsKubernetesPortForward",
                    "group": "2@8",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.service/i"
                },
                {
                    "command": "extension.vsKubernetesPortForward",
                    "group": "2@9",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.deployment/i"
                },
                {
                    "command": "extension.vsKubernetesScale",
                    "group": "2@10",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(deployment|job|rc|rs|statefulset)/i"
                },
                {
                    "command": "extension.vsKubernetesDeleteNow",
                    "group": "2@11",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.pod/i"
                },
                {
                    "command": "extension.vsKubernetesLogs",
                    "group": "inline",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(pod|job)/i"
                },
                {
                    "command": "extension.vsKubernetesLogs",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(pod|job)/i"
                },
                {
                    "command": "extension.vsKubernetesLogsLast300AndFollow",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(pod|job)/i"
                },
                {
                    "command": "extension.vsKubernetesLogsPreview",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(pod|job)/i"
                },
                {
                    "command": "extension.vsKubernetesCronJobRunNow",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.cronjob/i"
                },
                {
                    "command": "extension.vsKubernetesAddFile",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.configmap/i"
                },
                {
                    "command": "extension.vsKubernetesAddFile",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.secret/i"
                },
                {
                    "command": "extension.vsKubernetesDeleteFile",
                    "group": "3",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.file/i"
                },
                {
                    "command": "extension.vsKubernetesCopy",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmrelease/i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesRefresh",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmrelease/i",
                    "group": "1"
                },
                {
                    "command": "extension.vsKubernetesRestart",
                    "group": "2@6",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.resource\\.(deployment|job|rc|rs|statefulset)/i"
                },
                {
                    "command": "extension.helmExportValues",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmrelease/i",
                    "group": "1"
                },
                {
                    "command": "extension.helmGetValues",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmrelease/i",
                    "group": "1"
                },
                {
                    "command": "extension.helmFetch",
                    "group": "1",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer && viewItem =~ /vsKubernetes\\.((chart)|(chartversion))/i"
                },
                {
                    "command": "extension.helmInstall",
                    "group": "2",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer && viewItem =~ /vsKubernetes\\.((chart)|(chartversion))/i"
                },
                {
                    "command": "extension.helmDependencies",
                    "group": "0@3",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer && viewItem =~ /vsKubernetes\\.((chart)|(chartversion))/i"
                },
                {
                    "command": "extension.helmInspectChart",
                    "group": "0@1",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer && viewItem =~ /vsKubernetes\\.((chart)|(chartversion))/i"
                },
                {
                    "command": "extension.helmFetchValues",
                    "group": "0@3",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer && viewItem =~ /vsKubernetes\\.((chart)|(chartversion))/i"
                },
                {
                    "command": "extension.helmRollback",
                    "group": "3@1",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmhistory/i"
                },
                {
                    "command": "extension.helmUninstall",
                    "group": "3@2",
                    "when": "view == extension.vsKubernetesExplorer && viewItem =~ /vsKubernetes\\.helmrelease/i"
                },
                {
                    "command": "kubernetes.cloudExplorer.mergeIntoKubeconfig",
                    "group": "7",
                    "when": "view == kubernetes.cloudExplorer && viewItem =~ /kubernetes\\.providesKubeconfig/i"
                },
                {
                    "command": "kubernetes.cloudExplorer.saveKubeconfig",
                    "group": "7",
                    "when": "view == kubernetes.cloudExplorer && viewItem =~ /kubernetes\\.providesKubeconfig/i"
                },
                {
                    "command": "kubernetes.cloudExplorer.findProviders",
                    "when": "view == kubernetes.cloudExplorer && viewItem == kubernetes.noProviders",
                    "group": "1"
                },
                {
                    "command": "kubernetes.etcdExplorer.getKeyValue",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.etcdExplorer.delete",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.etcdExplorer.putKeyValue",
                    "when": "view == kubernetes.etcdExplorer && viewItem == vskubernetes/etcd/cluster",
                    "group": "0"
                },
                {
                    "command": "kubernetes.etcdExplorer.copyName",
                    "when": "view == kubernetes.etcdExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.minioExplorer.getContent",
                    "when": "view == kubernetes.minioExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.getContent",
                    "when": "view == kubernetes.gitlabExplorer && viewItem == vskubernetes/gitlab/file",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.createMergeRequest",
                    "when": "view == kubernetes.gitlabExplorer && viewItem == vskubernetes/gitlab/repo",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.copyPath",
                    "when": "view == kubernetes.gitlabExplorer",
                    "group": "0"
                },
                {
                    "command": "kubernetes.gitlabExplorer.copyName",
                    "when": "view == kubernetes.gitlabExplorer",
                    "group": "0"
                }
            ],
            "commandPalette": [
                {
                    "command": "extension.vsKubernetesDebounceActivation",
                    "when": "context == thiscontextdoesnotexist7603253285"
                },
                {
                    "command": "extension.vsKubernetesApplyFile",
                    "when": "filesExplorerFocus"
                },
                {
                    "command": "extension.vsKubernetesCreateFile",
                    "when": "filesExplorerFocus"
                },
                {
                    "command": "extension.vsKubernetesDeleteUri",
                    "when": "filesExplorerFocus"
                },
                {
                    "command": "extension.vsKubernetesRefreshExplorer",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesRefreshHelmRepoExplorer",
                    "when": "view == extension.vsKubernetesHelmRepoExplorer"
                },
                {
                    "command": "extension.vsKubernetesRefreshCloudExplorer",
                    "when": "view == kubernetes.cloudExplorer"
                },
                {
                    "command": "extension.vsKubernetesUseContext",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesClusterInfo",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesDeleteContext",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesUseNamespace",
                    "when": "true"
                },
                {
                    "command": "extension.vsKubernetesCopy",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesRefresh",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesAddFile",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.vsKubernetesDeleteFile",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.helmGet",
                    "when": "view == extension.vsKubernetesExplorer"
                },
                {
                    "command": "extension.helmInspectChart",
                    "when": "view === extension.vsKubernetesHelmRepoExplorer"
                },
                {
                    "command": "kubernetes.etcdExplorer.refresh",
                    "when": "view === kubernetes.etcdExplorer"
                },
                {
                    "command": "kubernetes.etcdExplorer.addExistingClusters",
                    "when": "view === kubernetes.etcdExplorer"
                },
                {
                    "command": "kubernetes.etcdExplorer.removeClusters",
                    "when": "view === kubernetes.etcdExplorer"
                },
                {
                    "command": "kubernetes.minioExplorer.refresh",
                    "when": "view === kubernetes.minioExplorer"
                },
                {
                    "command": "kubernetes.minioExplorer.addExistingClusters",
                    "when": "view === kubernetes.minioExplorer"
                },
                {
                    "command": "kubernetes.minioExplorer.removeClusters",
                    "when": "view === kubernetes.minioExplorer"
                },
                {
                    "command": "kubernetes.gitlabExplorer.refresh",
                    "when": "view === kubernetes.gitlabExplorer"
                },
                {
                    "command": "kubernetes.homeExplorer.refresh",
                    "when": "view === kubernetes.homeExplorer"
                },
                {
                    "command": "kubernetes.gitlabExplorer.addExistingRepository",
                    "when": "view === kubernetes.gitlabExplorer"
                },
                {
                    "command": "kubernetes.gitlabExplorer.createMergeRequest",
                    "when": "view === kubernetes.gitlabExplorer && viewItem == gitlabrepo"
                },
                {
                    "command": "kubernetes.gitlabExplorer.removeRepository",
                    "when": "view === kubernetes.gitlabExplorer"
                },
                {
                    "command": "kubernetes.cloudExplorer.mergeIntoKubeconfig",
                    "when": "true"
                },
                {
                    "command": "kubernetes.cloudExplorer.saveKubeconfig",
                    "when": "true"
                },
                {
                    "command": "kubernetes.portForwarding.showSessions",
                    "when": "true"
                }
            ]
        },
        "commands": [
            {
                "command": "extension.vsKubernetesDebounceActivation",
                "title": "Debounce Activation",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDescribe.Refresh",
                "title": "Refresh",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesCreate",
                "title": "Create",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesCreateFile",
                "title": "Create Kubernetes resource",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesAddWatch",
                "title": "Watch",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDelete",
                "title": "Delete",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDeleteNow",
                "title": "Delete Now",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDeleteUri",
                "title": "Delete Kubernetes resource",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDeleteWatch",
                "title": "Stop Watching",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesEdit",
                "title": "Edit",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesEditLegacy",
                "title": "Edit Legacy",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesServiceBridge",
                "title": "Bridge to ...",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesServiceBridgeRecover",
                "title": "Bridge rollback",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesTransferServiceOwnership",
                "title": "Transfer to & keep resource",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRemoveServiceKeepAnnotation",
                "title": "Resource policy: clear",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesApply",
                "title": "Apply",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesApplyFile",
                "title": "Apply Kubernetes resource",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesExplain",
                "title": "Explain",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesLoad",
                "title": "Load",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesGet",
                "title": "Get",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesNodeShell",
                "title": "Terminal",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesInstances",
                "title": "Instances",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRestart",
                "title": "Restart",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRun",
                "title": "Run",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesLogs",
                "title": "Logs",
                "category": "Kubernetes",
                "icon": "$(list-flat)"
            },
            {
                "command": "extension.vsKubernetesLogsLast300AndFollow",
                "title": "Logs last 300 rows & Follow",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesLogsPreview",
                "title": "Logs Preview",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesLogsLast300AndFollow",
                "title": "Logs last 300 rows & Follow",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesLogsPreview",
                "title": "Logs Preview",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesExpose",
                "title": "Expose",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDescribe",
                "title": "Describe",
                "category": "Kubernetes",
                "icon": "$(eye)"
            },
            {
                "command": "extension.vsKubernetesSync",
                "title": "Sync Working Copy to Cluster",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesExec",
                "title": "Exec",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesTerminal",
                "title": "Terminal",
                "category": "Kubernetes",
                "icon": "$(terminal)"
            },
            {
                "command": "extension.vsKubernetesDiff",
                "title": "Diff",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesScale",
                "title": "Scale",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDebug",
                "title": "Debug (Launch)",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDebugAttach",
                "title": "Debug (Attach)",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDebugLocalTunnel",
                "title": "Debug (Local Tunnel)",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesFindLocalTunnelDebugProviders",
                "title": "Find Local Tunnel Debug Providers on Marketplace",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRemoveDebug",
                "title": "Remove Debug",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesConfigureFromCluster",
                "title": "Add Existing Cluster",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesCreateCluster",
                "title": "Create Cluster",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesUseContext",
                "title": "Set as Current Cluster",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesUseKubeconfig",
                "title": "Set Kubeconfig",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesClusterInfo",
                "title": "Show Cluster Info",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDeleteContext",
                "title": "Delete from kubeconfig",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesUseNamespace",
                "title": "Use Namespace",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDashboard",
                "title": "Open Dashboard",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsMinikubeStop",
                "title": "Stop minikube",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsMinikubeStart",
                "title": "Start minikube",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsMinikubeStatus",
                "title": "Minikube status",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesPortForward",
                "title": "Port Forward",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesCopy",
                "title": "Copy Name",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRefresh",
                "title": "Refresh",
                "category": "Kubernetes",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "extension.vsKubernetesAddFile",
                "title": "Add File(s)",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesDeleteFile",
                "title": "Delete File",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesCronJobRunNow",
                "title": "Run CronJob Now",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRefreshExplorer",
                "title": "Refresh",
                "category": "Kubernetes",
                "icon": {
                    "light": "images/light/refresh.svg",
                    "dark": "images/dark/refresh.svg"
                }
            },
            {
                "command": "extension.vsKubernetesShowEvents",
                "title": "Show Events",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesFollowEvents",
                "title": "Follow Events",
                "category": "Kubernetes"
            },
            {
                "command": "extension.vsKubernetesRefreshHelmRepoExplorer",
                "title": "Refresh",
                "category": "Helm",
                "icon": {
                    "light": "images/light/refresh.svg",
                    "dark": "images/dark/refresh.svg"
                }
            },
            {
                "command": "extension.helmVersion",
                "title": "Version",
                "description": "Get the version of the local Helm client.",
                "category": "Helm"
            },
            {
                "command": "extension.helmLint",
                "title": "Lint",
                "description": "Run the Helm linter on this chart.",
                "category": "Helm"
            },
            {
                "command": "extension.helmDepUp",
                "title": "Dependency Update",
                "description": "Update the dependencies listed in requirements.yaml.",
                "category": "Helm"
            },
            {
                "command": "extension.helmDryRun",
                "title": "Dry Run",
                "description": "Run 'helm install --dry-run --debug' on this chart.",
                "category": "Helm"
            },
            {
                "command": "extension.helmExportValues",
                "title": "Export Values",
                "description": "Run 'helm get values' on this release.",
                "category": "Helm"
            },
            {
                "command": "extension.helmGetValues",
                "title": "Get Values",
                "description": "Run 'helm get values' on this release.",
                "category": "Helm"
            },
            {
                "command": "extension.helmTemplate",
                "title": "Template",
                "description": "Run 'helm template' on this chart.",
                "category": "Helm"
            },
            {
                "command": "extension.helmInsertReq",
                "title": "Insert Dependency",
                "description": "Insert a dependency YAML fragment",
                "category": "Helm"
            },
            {
                "command": "extension.helmTemplatePreview",
                "title": "Preview Template",
                "description": "Run 'helm template' on this chart and show only this file.",
                "category": "Helm"
            },
            {
                "command": "extension.helmFetchValues",
                "title": "Fetch values",
                "description": "Fetches values.yaml from the chart",
                "category": "Helm"
            },
            {
                "command": "extension.helmInspectChart",
                "title": "Inspect Chart",
                "description": "Inspect a Helm Chart",
                "category": "Helm"
            },
            {
                "command": "extension.helmCreate",
                "title": "Create Chart",
                "description": "Create a new Helm Chart",
                "category": "Helm"
            },
            {
                "command": "extension.helmConvertToTemplate",
                "title": "Convert to Template",
                "description": "Convert this manifest to a Helm template",
                "category": "Helm"
            },
            {
                "command": "extension.helmParameterise",
                "title": "Convert to Template Parameter",
                "description": "Convert this value to a Helm template parameter",
                "category": "Helm"
            },
            {
                "command": "extension.helmGet",
                "title": "Get Release",
                "description": "Get a Helm release from the cluster",
                "category": "Helm"
            },
            {
                "command": "extension.helmPackage",
                "title": "Package",
                "description": "Package a chart directory into a versioned chart archive file.",
                "category": "Helm"
            },
            {
                "command": "extension.helmFetch",
                "title": "Fetch",
                "description": "Fetch a Helm chart into the current project",
                "category": "Helm"
            },
            {
                "command": "extension.helmInstall",
                "title": "Install",
                "description": "Install a Helm chart into the cluster",
                "category": "Helm"
            },
            {
                "command": "extension.helmUpgrade",
                "title": "Upgrade",
                "description": "Upgrade a Helm release",
                "category": "Helm"
            },
            {
                "command": "extension.helmUninstall",
                "title": "Uninstall",
                "description": "Uninstall a Helm release",
                "category": "Helm"
            },
            {
                "command": "extension.helmRollback",
                "title": "Rollback",
                "description": "Rollback Helm Release",
                "category": "Helm"
            },
            {
                "command": "extension.helmDependencies",
                "title": "Show Dependencies",
                "description": "List the dependencies of a Helm chart",
                "category": "Helm"
            },
            {
                "command": "kubernetes.etcdExplorer.refresh",
                "title": "Refresh",
                "description": "Refresh all clusters",
                "category": "ETCD",
                "icon": {
                    "dark": "images/dark/refresh.svg",
                    "light": "images/light/refresh.svg"
                }
            },
            {
                "command": "extension.vsKubernetesRefreshCloudExplorer",
                "title": "Refresh",
                "category": "Kubernetes",
                "icon": {
                    "light": "images/light/refresh.svg",
                    "dark": "images/dark/refresh.svg"
                }
            },
            {
                "command": "kubernetes.etcdExplorer.addExistingClusters",
                "title": "Add cluster",
                "description": "Add an existing cluster",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.etcdExplorer.removeClusters",
                "title": "Remove cluster",
                "description": "Remove an existing cluster",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.etcdExplorer.getKeyValue",
                "title": "Get value",
                "description": "Get value bound to current key",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.etcdExplorer.delete",
                "title": "Delete",
                "description": "Delete current key from cluster",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.etcdExplorer.putKeyValue",
                "title": "Put",
                "description": "Put new key and value pair to cluster",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.etcdExplorer.copyName",
                "title": "Copy Name",
                "description": "Cope object's name",
                "category": "Kubernetes-ETCD"
            },
            {
                "command": "kubernetes.minioExplorer.refresh",
                "title": "Refresh",
                "description": "Refresh all clusters",
                "category": "Kubernetes-MinIO",
                "icon": {
                    "dark": "images/dark/refresh.svg",
                    "light": "images/light/refresh.svg"
                }
            },
            {
                "command": "kubernetes.minioExplorer.addExistingClusters",
                "title": "Add cluster",
                "description": "Add an existing cluster",
                "category": "Kubernetes-MinIO"
            },
            {
                "command": "kubernetes.minioExplorer.removeClusters",
                "title": "Remove cluster",
                "description": "Remove an existing cluster",
                "category": "Kubernetes-MinIO"
            },
            {
                "command": "kubernetes.minioExplorer.getContent",
                "title": "Get file content",
                "description": "Get file content bound to current object",
                "category": "Kubernetes-MinIO"
            },
            {
                "command": "kubernetes.gitlabExplorer.refresh",
                "title": "Refresh",
                "description": "Refresh all clusters",
                "category": "Kubernetes-GitLab",
                "icon": {
                    "dark": "images/dark/refresh.svg",
                    "light": "images/light/refresh.svg"
                }
            },
            {
                "command": "kubernetes.homeExplorer.refresh",
                "title": "Refresh",
                "description": "Refresh home items",
                "category": "Kubernetes-Home",
                "icon": {
                    "dark": "images/dark/refresh.svg",
                    "light": "images/light/refresh.svg"
                }
            },
            {
                "command": "kubernetes.gitlabExplorer.addExistingRepository",
                "title": "Add repository",
                "description": "Add an existing cluster",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.createMergeRequest",
                "title": "Create merge request",
                "description": "Create a new merge request",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.removeRepository",
                "title": "Remove repository",
                "description": "Remove an existing cluster",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.getContent",
                "title": "Get the file content",
                "description": "Get file content bound to current object",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.submitContent",
                "title": "Submit content to remote",
                "description": "Submit content to remote repository",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.copyPath",
                "title": "Copy file path",
                "description": "Copy the path of current object",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.gitlabExplorer.copyName",
                "title": "Copy name",
                "description": "Copy the name of current object",
                "category": "Kubernetes-GitLab"
            },
            {
                "command": "kubernetes.homeExplorer.open",
                "title": "Open file",
                "description": "Open file in filesystem",
                "category": "Kubernetes-FileSystem"
            },
            {
                "command": "kubernetes.cloudExplorer.mergeIntoKubeconfig",
                "title": "Merge into Kubeconfig",
                "description": "Merge the cluster's kubeconfig into your existing kubeconfig"
            },
            {
                "command": "kubernetes.cloudExplorer.saveKubeconfig",
                "title": "Save Kubeconfig",
                "description": "Save the cluster's kubeconfig as a kubeconfig file"
            },
            {
                "command": "kubernetes.cloudExplorer.findProviders",
                "title": "Find Cloud Providers on Marketplace",
                "description": "Find extensions that add clouds to the Cloud Explorer"
            },
            {
                "command": "kubernetes.portForwarding.showSessions",
                "title": "Show Port Forwarding Sessions",
                "category": "Kubernetes"
            }
        ],
        "keybindings": [
            {
                "command": "extension.vsKubernetesDescribe.Refresh",
                "key": "shift+ctrl+r",
                "mac": "shift+cmd+r",
                "when": "vscodeKubernetesDescribeContext"
            }
        ],
        "languages": [
            {
                "id": "helm",
                "aliases": [
                    "helm-template",
                    "helm"
                ],
                "filenamePatterns": [
                    "**/templates/*.yaml",
                    "**/templates/*.yml",
                    "**/templates/*.tpl",
                    "**/templates/**/*.yaml",
                    "**/templates/**/*.yml",
                    "**/templates/**/*.tpl"
                ],
                "configuration": "./language-configuration.json"
            },
            {
                "id": "ignore",
                "filenames": [
                    ".helmignore"
                ]
            },
            {
                "id": "yaml",
                "filenames": [
                    "Chart.lock",
                    "requirements.lock",
                    "**/.kube/config"
                ]
            }
        ],
        "grammars": [
            {
                "language": "helm",
                "scopeName": "source.helm",
                "path": "./syntaxes/helm.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "helm",
                "path": "./snippets/helm.json"
            }
        ],
        "debuggers": []
    },
    "scripts": {
        "vscode:prepublish": "npm run vscode:prepublish:ext && npm run vscode:prepublish:view",
        "vscode:prepublish:ext": "webpack --mode production",
        "vscode:prepublish:view": "webpack --mode production --config src/components/logs/webpack.config.js",
        "lint": "eslint -c .eslintrc.js --ext .ts ./src",
        "compile": "npm run compile:ext && npm run compile:view",
        "compile:ext": "webpack --mode none",
        "compile:view": "webpack --mode none --config src/components/logs/webpack.config.js",
        "watch": "webpack --mode development --watch",
        "test-compile": "./node_modules/.bin/tsc -p ./",
        "test": "npm run test-compile && node ./out/test/runTest.js"
    },
    "extensionDependencies": [
        "redhat.vscode-yaml"
    ],
    "dependencies": {
        "@gitbeaker/cli": "^35.8.1",
        "@gitbeaker/node": "^35.8.1",
        "@kubernetes/client-node": "^0.17.1",
        "@vscode/debugadapter": "^1.57.0",
        "@vscode/debugprotocol": "^1.57.0",
        "@vscode/extension-telemetry": "^0.6.2",
        "ajv": "^6.9.1",
        "ansi-to-html": "^0.7.2",
        "await-notify": "^1.0.1",
        "axios": "^1.3.4",
        "clipboardy": "^1.2.3",
        "compare-versions": "^3.1.0",
        "debug": "^3.1.0",
        "docker-file-parser": "^1.0.3",
        "dockerfile-parse": "^0.2.0",
        "download": "^7.1.0",
        "etcd3": "^1.1.0",
        "fflate": "^0.7.4",
        "fuzzysearch": "^1.0.3",
        "got": "^12.5.1",
        "graceful-fs": "^4.1.11",
        "js-yaml": "^4.1.0",
        "lodash": "^4.17.21",
        "minio": "^7.0.32",
        "mixin-deep": "^1.3.2",
        "mkdirp": "^0.5.1",
        "moment": "^2.29.1",
        "natives": "^1.1.3",
        "node-yaml-parser": "^0.0.9",
        "opn": "^5.2.0",
        "pluralize": "^4.0.0",
        "portfinder": "^1.0.13",
        "promise": "^8.2.0",
        "rxjs": "^6.5.4",
        "semver": "^5.5.1",
        "shelljs": "^0.7.7",
        "spawn-rx": "^3.0.0",
        "sshpk": "^1.13.2",
        "tar": "^4.4.1",
        "tmp": "^0.0.31",
        "unzipper": "^0.10.5",
        "url-parse": "^1.5.1",
        "uuid": "^3.1.0",
        "vscode-uri": "^1.0.1",
        "yaml-ast-parser": "^0.0.40",
        "yamljs": "^0.3.0"
    },
    "devDependencies": {
        "@bendera/vscode-webview-elements": "^0.2.0",
        "@types/clipboardy": "^1.1.0",
        "@types/js-yaml": "^4.0.5",
        "@types/lodash": "^4.14.113",
        "@types/minio": "^7.0.13",
        "@types/mkdirp": "^0.5.2",
        "@types/mocha": "^8.0.4",
        "@types/node": "^10.2.0",
        "@types/opn": "^5.1.0",
        "@types/pluralize": "^0.0.29",
        "@types/request": "^2.48.1",
        "@types/semver": "^5.5.0",
        "@types/shelljs": "^0.7.8",
        "@types/sinon": "^7.0.0",
        "@types/tar": "^4.0.0",
        "@types/tmp": "^0.0.33",
        "@types/unzipper": "^0.10.0",
        "@types/uuid": "^3.4.4",
        "@types/vscode": "^1.71.0",
        "@types/websocket": "^0.0.40",
        "@types/yamljs": "^0.2.31",
        "@typescript-eslint/eslint-plugin": "^5.38.0",
        "@typescript-eslint/eslint-plugin-tslint": "^5.38.0",
        "@typescript-eslint/parser": "^5.38.0",
        "electron": "^13.1.4",
        "eslint": "^7.29.0",
        "file-loader": "^6.2.0",
        "gulp": "^5.0.0",
        "gulp-tslint": "^8.1.2",
        "html-webpack-plugin": "^4.2.0",
        "mocha": "^8.1.3",
        "sinon": "^6.3.5",
        "ts-loader": "^9.4.1",
        "ts-node": "^10.9.1",
        "tslint": "^6.1.3",
        "typescript": "^4.8.3",
        "vscode-test": "^1.4.1",
        "webpack": "^5.74.0",
        "webpack-cli": "^4.10.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/cloorc/vscode-kubernetes-tools"
    }
}
